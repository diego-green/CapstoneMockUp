@page "/Dashboard"
@model DashboardModel

<main class="dashboard">
    <h2 class="h2">Home Dashboard</h2>

    <section class="grid">
        <!-- MAIN PROJECT CARD -->
        <fluent-card class="project-card" appearance="filled" elevation="3">
            <div class="project-card__header">
                <div class="project-name-inner">
                    @{
                        var title = (Model.Projects?.FirstOrDefault(p => p.Id == Model.ProjectId)?.Name)
                        ?? Model.Projects?.FirstOrDefault()?.Name
                        ?? "No Project Selected";
                    }
                    @title
                </div>

                <form method="get" class="filter-row">
                    <label class="form-label">Filter by project</label>
                    <fluent-select name="ProjectId" onchange="this.form.submit()">
                        @if (Model.Projects?.Count > 0)
                        {
                            foreach (var p in Model.Projects)
                            {
                                <fluent-option value="@p.Id" selected="@(p.Id == Model.ProjectId)">@p.Name</fluent-option>
                            }
                        }
                        else
                        {
                            <fluent-option value="">(none yet)</fluent-option>
                        }
                    </fluent-select>
                    <noscript><button type="submit">Apply</button></noscript>
                </form>
            </div>

            @if (User?.Identity?.IsAuthenticated ?? false)
            {
                <form method="post" enctype="multipart/form-data" asp-page-handler="UploadPdf" class="upload-row">
                    <div class="field">
                        <label class="form-label">Upload PDF to project</label>
                        <fluent-select name="projectId">
                            @if (Model.Projects?.Count > 0)
                            {
                                foreach (var p in Model.Projects)
                                {
                                    <fluent-option value="@p.Id" selected="@(p.Id == Model.ProjectId)">@p.Name</fluent-option>
                                }
                            }
                            else
                            {
                                <fluent-option value="DefaultProject" selected="true">DefaultProject</fluent-option>
                            }
                        </fluent-select>
                    </div>

                    <div class="field">
                        <label class="form-label">Create new project</label>
                        <fluent-text-field name="newProjectName" placeholder="e.g., Honeywell-Project-Name"></fluent-text-field>
                    </div>

                    <div class="field">
                        <label class="form-label">PDF file selector</label>
                        <div class="file-picker">
                            <fluent-button appearance="accent" type="button" onclick="document.getElementById('pdfFile').click()">Select PDF</fluent-button>
                            <span id="fileName" class="file-name">No file selected</span>
                            <input type="file" id="pdfFile" name="pdfFile" accept=".pdf" required hidden
                                   onchange="document.getElementById('fileName').textContent = this.files.length ? this.files[0].name : 'No file selected';">
                        </div>
                    </div>

                    <div class="actions">
                        <fluent-button appearance="accent" type="submit" class="action-btn">Upload</fluent-button>
                    </div>
                </form>

            }

            @if (Model.SlideUrls?.Count > 0)
            {
                <div class="project-card__show">
                    <div id="slideShell" class="slide-shell">
                        <img id="slideImg" class="slide-img" alt="Slide" />
                        <div class="slide-controls">
                            <fluent-button id="prevBtn" appearance="secondary" size="small">Prev</fluent-button>
                            <fluent-button id="playPauseBtn" appearance="secondary" size="small">Pause</fluent-button>
                            <fluent-button id="nextBtn" appearance="secondary" size="small">Next</fluent-button>
                            <span id="pageLabel" class="page-chip">1 / @Model.SlideUrls.Count</span>
                            <span>Interval</span>
                            <fluent-number-field id="intervalInput" min="1" value="4" style="width:80px;"></fluent-number-field>
                            <span>sec</span>
                            <fluent-button id="fullscreenBtn" appearance="secondary" size="small" title="Full screen">⤢</fluent-button>
                        </div>
                    </div>
                </div>

                <script>
                    (function () {
                      const slides = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.SlideUrls));
                      let idx = 0, playing = true, timer = null;

                      const img = document.getElementById("slideImg");
                      const shell = document.getElementById("slideShell");
                      const pageLabel = document.getElementById("pageLabel");
                      const prevBtn = document.getElementById("prevBtn");
                      const nextBtn = document.getElementById("nextBtn");
                      const playPauseBtn = document.getElementById("playPauseBtn");
                      const intervalInput = document.getElementById("intervalInput");
                      const fullscreenBtn = document.getElementById("fullscreenBtn");

                      function show(i){ idx = (i + slides.length) % slides.length; img.src = slides[idx]; pageLabel.textContent = (idx+1)+" / "+slides.length; }
                      function start(){ stop(); const ms = Math.max(1000, parseInt(intervalInput.value || "4") * 1000); timer = setInterval(() => show(idx+1), ms); }
                      function stop(){ if (timer) clearInterval(timer); timer = null; }

                      prevBtn.addEventListener("click",()=>{ stop(); show(idx-1); if(playing) start(); });
                      nextBtn.addEventListener("click",()=>{ stop(); show(idx+1); if(playing) start(); });
                      playPauseBtn.addEventListener("click",()=>{ playing=!playing; playPauseBtn.textContent=playing?"Pause":"Play"; if(playing) start(); else stop(); });
                      intervalInput.addEventListener("change",()=>{ if(playing) start(); });

                      fullscreenBtn.addEventListener("click",()=>{ if(!document.fullscreenElement) shell.requestFullscreen?.(); else document.exitFullscreen?.(); });

                      show(0); start();
                    })();
                </script>
            }
            else
            {
                <div class="project-card__show">
                    <p class="text-muted">Upload a PDF for this project to generate slides.</p>
                </div>
            }
        </fluent-card>

        <!-- RIGHT COLUMN -->
        <div class="right-col">
            <fluent-card hx-get="/Dashboard/AnnouncementsPartial" hx-trigger="load" hx-swap="innerHTML" style="position:relative;">
                <div>
                    <h3 style="margin-top:0;">Announcement Board</h3>
                    @if (Model.LatestAnnouncement != null)
                    {
                     
                        var isAuth = User?.Identity?.IsAuthenticated == true;
                        var fullName = isAuth
                        ? (User.FindFirst("given_name")?.Value
                        ?? User.FindFirst("name")?.Value
                        ?? User.Identity?.Name)
                        : null;

                        <div class="announcement-scroll">
                            <!-- repeat for each message -->
                            <div class="announcement-card">
                                <div class="announcement-header">
                                    <strong>@fullName</strong>
                                    <span class="announcement-date">@DateTime.Now</span>
                                </div>
                                <p>@Model.LatestAnnouncement</p>
                            </div>
                        </div>


                    }
                    @if (User?.Identity?.IsAuthenticated ?? false)
                    {
                        <form method="post">
                            <div class="mb-3">
                                <label for="Announcement" class="form-label">Announcement</label>
                                <textarea id="Announcement"
                                      name="Announcement"
                                      rows="1"
                                      class="glass-textarea"
                                      placeholder="Type here..."></textarea>

                            </div>
                            <button type="submit" class="btn btn-primary">Save</button>
                            <a asp-page="/Dashboard" class="btn btn-secondary">Cancel</a>
                        </form>

                    }
                </div>
            </fluent-card>

            <fluent-card class="metric" hx-get="/Dashboard/TemperaturePartial" hx-trigger="load, every 10s" hx-swap="innerHTML" style="padding:0;">
                <div class="metric-inner" style="padding:12px;">
                    <div class="metric-title">T: -- °C</div>
                    <div class="bar"><div class="bar-fill" style="width:0%"></div></div>
                </div>
            </fluent-card>

            <fluent-card class="metric" hx-get="/Dashboard/HumidityPartial" hx-trigger="load, every 10s" hx-swap="innerHTML" style="padding:0;">
                <div class="metric-inner" style="padding:12px;">
                    <div class="metric-title">RH: --%</div>
                    <div class="bar bar-danger"><div class="bar-fill" style="width:0%"></div></div>
                </div>
            </fluent-card>
        </div>
    </section>
</main>
